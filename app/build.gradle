apply plugin: 'com.android.application'
apply plugin: 'de.mannodermaus.android-junit5'
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.simx.barcodescanner"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        // (Required) Make sure to use the AndroidJUnitRunner, of a subclass of it
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // (Required) Connect JUnit 5 to the runner
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '28.0.1'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    def androidx_version = "1.0.0-beta01"
    implementation "androidx.annotation:annotation:$androidx_version"
    implementation "androidx.recyclerview:recyclerview-selection:$androidx_version"
    implementation "androidx.cardview:cardview:$androidx_version"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidx_version"
    implementation "com.google.android.material:material:$androidx_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$androidx_version"
    implementation "androidx.viewpager:viewpager:$androidx_version"
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'

    def lifecycle_version = "2.0.0-beta01"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version" // use kapt for Kotlin
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // use -ktx for Kotlin

    implementation 'androidx.multidex:multidex:' + rootProject.ext.multidex


    testImplementation 'junit:junit:' + rootProject.ext.junit
    androidTestImplementation 'androidx.test:runner:' + rootProject.ext.runner
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + rootProject.ext.espresso

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.2.0"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.2.0"

    // (Optional) If you also have JUnit 4-based tests
    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.2.0"
}
